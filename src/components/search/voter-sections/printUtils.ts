
import { jsPDF } from "jspdf";
import { Database } from "@/integrations/supabase/types";
import { formatDate } from "@/lib/utils";
import { supabase } from "@/integrations/supabase/client";

type VoterRecord = Database["public"]["Tables"]["bronx"]["Row"];

export const printVoterRecord = async (voter: VoterRecord) => {
  const doc = new jsPDF();
  
  try {
    // Get current user info
    const { data: { user } } = await supabase.auth.getUser();
    const { data: profile } = await supabase
      .from('profiles')
      .select('full_name, email')
      .eq('id', user?.id)
      .single();

    // Add BallotBase text with black color
    doc.setFontSize(24);
    doc.setTextColor(0, 0, 0);
    doc.setFont("helvetica", "bold");
    doc.text("BallotBase", 20, 20);
    
    // Add report generation info
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text(`Generated by: ${profile?.full_name || user?.email || 'Unknown user'}`, 20, 35);
    doc.text(`Date: ${formatDate(new Date().toISOString())}`, 20, 42);
    
    // Add title with voter name
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.text(`Voter Record: ${voter.first_name} ${voter.middle || ''} ${voter.last_name} ${voter.suffix || ''}`.trim(), 20, 60);
    
    // Helper function to add sections with border
    const addSection = (title: string, content: { label: string; value: string | null }[], startY: number): number => {
      // Add border around the section
      doc.setDrawColor(0);
      doc.setLineWidth(0.5);
      
      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.text(title, 20, startY);
      
      doc.setFont("helvetica", "normal");
      doc.setFontSize(10);
      
      let currentY = startY + 10;
      const lineHeight = 7;
      const sectionStartY = startY - 5;
      let sectionHeight = 15; // Initial height for title and padding
      
      content.forEach(({ label, value }) => {
        if (value) {
          doc.text(`${label}: ${value}`, 25, currentY);
          currentY += lineHeight;
          sectionHeight += lineHeight;
        }
      });
      
      // Draw border around the section (with some padding)
      doc.rect(15, sectionStartY, 180, sectionHeight);
      
      return currentY + 5;
    };

    // Add Personal Information section
    let currentY = 80;
    currentY = addSection("Personal Information", [
      { label: "Date of Birth", value: voter.date_of_birth ? formatDate(voter.date_of_birth) : null },
      { label: "Gender", value: voter.gender },
      { label: "Party", value: voter.enrolled_party },
      { label: "Voter Status", value: voter.voter_status },
      { label: "County Voter No.", value: voter.county_voter_no },
      { label: "State Voter ID", value: voter.state_voter_id },
    ], currentY);

    // Add Address Information section
    currentY = addSection("Address Information", [
      { label: "Residence", value: `${voter.house} ${voter.house_suffix || ''} ${voter.pre_st_direction || ''} ${voter.street_name} ${voter.post_st_direction || ''}`.trim() },
      { label: "Unit", value: voter.unit_no ? `${voter.aptunit_type || 'Unit'} ${voter.unit_no}` : null },
      { label: "City", value: voter.residence_city },
      { label: "ZIP", value: voter.zip_code ? `${voter.zip_code}${voter.zip_four ? '-' + voter.zip_four : ''}` : null },
    ], currentY);

    // Add District Information section
    currentY = addSection("District Information", [
      { label: "Election District", value: voter.election_district },
      { label: "Legislative District", value: voter.legislative_district },
      { label: "Congressional District", value: voter.congressional_district },
      { label: "Senate District", value: voter.state_senate_district },
      { label: "Assembly District", value: voter.assembly_district },
      { label: "Ward", value: voter.ward },
    ], currentY);

    // Add Voting History section
    currentY = addSection("Voting History", [
      { label: "Last Date Voted", value: voter.last_date_voted },
      { label: "Last Year Voted", value: voter.last_year_voted },
      { label: "Last County Voted", value: voter.last_county_voted },
      { label: "Voter History", value: voter.voter_history },
    ], currentY);

    // Add Registration Information section
    currentY = addSection("Registration Information", [
      { label: "Application Date", value: voter.application_date },
      { label: "Application Source", value: voter.application_source },
      { label: "Previous Name", value: voter.last_registered_name },
      { label: "Previous Address", value: voter.last_registered_address },
    ], currentY);

    doc.save(`voter_record_${voter.last_name}_${voter.first_name}.pdf`);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};
